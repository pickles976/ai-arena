export var BaseStartTeam1 = "\n    console.log(\"Base Start!\")\n";
export var BaseUpdateTeam1 = "\n    const energyPerShip = 100\n    const shipEnergy = 50\n\n    if (base.resources.metal > base.shipCost && base.resources.energy > energyPerShip * Game.getShipsByTeam(base.team).length){\n        base.spawnShip(shipEnergy,false)\n    }\n\n    if (base.resources.metal > base.upgradeMaxEnergyCost){\n        base.upgradeMaxEnergy()\n    }\n\n    if (base.resources.metal > base.upgradeRefiningEfficiencyCost){\n        base.upgradeRefiningEfficiency()\n    }\n\n    if (base.resources.metal > base.upgradeInteractRadiusCost){\n        base.upgradeInteractRadius()\n    }\n\n    if (base.resources.metal > base.upgradeMaxHealthCost){\n        base.upgradeMaxHealth()\n    }\n\n    if (base.resources.metal > base.upgradeHealRateCost){\n        base.upgradeHealRate()\n    }\n\n    Graphics.drawText(base.resources.toString() + ' Health: ' + base.health.toFixed(2),base.transform.position.subtract(new Vector2D(100,0)),12,\"#FFFFFF\")\n";
export var ShipStartTeam1 = "\n    ship.target = {}\n    ship.state = \"IDLE\"\n    ship.arr = []\n    ship.shootCooldown = 10\n    ship.shootTimer = 0\n";
export var ShipUpdateTeam1 = "\n\nconst speed = 5.0\nship.shootTimer--\n\nfunction teammateHasTarget(target){\n    const teamShips = Game.getShipsByTeam(ship.team).filter((obj) => obj.uuid != ship.uuid)\n\n    if(teamShips.length > 0){\n        for (const j in teamShips){\n            if (target != null && target != undefined)\n                if (teamShips[j].target.uuid == target.uuid)\n                    return true\n        }\n    }\n    return false\n}\n\n// STATE MACHINE\nswitch(ship.state){\n\n    case \"IDLE\":\n\n        const asteroids = Game.getAsteroids()\n        let closest = [{},100000]\n\n        for (const index in asteroids){\n            const asteroid = asteroids[index]\n            const d = dist(asteroid,ship)\n            if (d < closest[1]){\n                if (!teammateHasTarget(asteroid)){\n                    closest = [asteroid,d]\n                }\n            }\n        }\n\n        ship.target = closest[0]\n        ship.state = \"MOVE_TO_ASTEROID\"\n\n        break;\n\n    case \"MOVE_TO_ASTEROID\":\n\n        if (ship.target.type === \"ASTEROID\"){\n            ship.seekTarget(ship.target,speed)\n        }else{\n            ship.target = base\n            ship.state = \"MOVE_TO_BASE\"\n        }\n\n        break;\n\n    case \"MOVE_TO_BASE\":\n\n        if (ship.resources.metal > 0 || ship.resources.water > 0 && dist(ship,base) > base.interactRadius){\n            ship.seekTarget(ship.target,speed)\n        }else{\n            ship.state = \"IDLE\"\n        }\n\n        break;\n\n    case \"MOVE_TO_ENERGY\":\n        if (ship.target.type === \"ENERGY_CELL\"){\n            ship.seekTarget(ship.target,speed)\n        }else if (ship.target.type === \"BASE\") {\n            if (ship.resources.energy > 90 || base.resources.energy < 1 || dist(ship,base) > base.interactRadius){\n                ship.state = \"IDLE\"\n            }else{\n                ship.seekTarget(ship.target,speed)\n            }\n        }\n        else{\n            ship.state = \"IDLE\"\n        }\n        break;\n        \n}\n\n\n// seekTarget ENERGY\nif (ship.resources.energy < (ship.maxEnergy / 3)){\n    const energyCells = Game.getEnergyCells()\n\n    let closest = [base,dist(base,ship)]\n\n    for (const index in energyCells){\n        const energyCell = energyCells[index]\n        const d = dist(energyCell,ship)\n        if (d < closest[1]){\n            if (!teammateHasTarget(energyCell)){\n                closest = [energyCell,d]\n            }\n        }\n    }\n\n    ship.target = closest[0]\n    ship.state = \"MOVE_TO_ENERGY\"\n}\n\n// COMBAT\nif(ship.resources.energy > (ship.maxEnergy / 3) && ship.shootTimer < 0){\n    \n    let shootRadius = 700\n    const enemyBase = Game.getBaseByTeam(1 - ship.team)\n    let distance = dist(ship, enemyBase)\n\n    if (enemyBase.resources.energy < ship.resources.energy && distance < shootRadius){\n        ship.shoot(enemyBase.transform.position.subtract(ship.transform.position))\n        ship.shootTimer = ship.shootCooldown\n    }   \n}\n\n// UPGRADES\nif (base.resources.metal > ship.upgradeMaxEnergyCost && Game.getShipsByTeam(ship.team).length > 2){\n    ship.upgradeMaxEnergy()\n}\n\nif (base.resources.metal > ship.upgradeDamageCost && Game.getShipsByTeam(ship.team).length > 2){\n    ship.upgradeDamage()\n}\n\nship.targetID = ship.target.uuid\n\n// DEBUG DRAWING\nGraphics.drawText(ship.resources.toString(),ship.transform.position,10,\"#FFFFFF\")\nGraphics.drawText(ship.state,ship.transform.position.subtract(new Vector2D(0,1).multiply(-10)),8,\"#FFFFFF\")\nif (ship.target != undefined && ship.target.transform != undefined)\n    Graphics.drawLine(ship.transform.position,ship.target.transform.position,\"#00FF00\")\n";
export var BaseStartTeam0 = '';
export var BaseUpdateTeam0 = '';
export var ShipStartTeam0 = '';
export var ShipUpdateTeam0 = '';
//# sourceMappingURL=aiControls.js.map